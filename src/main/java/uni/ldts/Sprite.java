package uni.ldts;import uni.ldts.elements.Drawable;import javax.imageio.ImageIO;import java.awt.*;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;public class Sprite implements Drawable {    private final BufferedImage[] imgs;    private int selected = 0;    private final int rows, cols;    private final int spriteHeight, spriteWidth;    private boolean reversed = false;    /**     * A sprite is a collection of images portraying an element,     * usually an entity, which allows for game animations.     */    public Sprite(String path, int rows, int cols, int dx, int dy, int n) {        this.imgs = new BufferedImage[n];        this.rows = rows;        this.cols = cols;        this.spriteHeight = dy;        this.spriteWidth = dx;        BufferedImage bigImg = null;        try {            bigImg = ImageIO.read(new File(path));        } catch (IOException e) {            throw new RuntimeException(e);        }        for (int i=0; i<rows; i++) {            for (int j=0; j<cols; j++) {                this.imgs[(i*cols) + j] = bigImg.getSubimage(j*dx, i*dy, dx, dy);            }        }        // more info on sprite creation in docs ^    }    public Sprite(String path, int dx, int dy) {        BufferedImage bigImg = null;        try {            bigImg = ImageIO.read(new File(path));        } catch (IOException e) {            throw new RuntimeException(e);        }        this.cols = bigImg.getWidth() / dx;        this.imgs = new BufferedImage[cols];        this.rows = 1;        this.spriteHeight = dy;        this.spriteWidth = dx;        for (int j=0; j<cols; j++) {            this.imgs[j] = bigImg.getSubimage(j*dx, 0, dx, dy);        }        // more info on sprite creation in docs ^    }    public Sprite(BufferedImage image) {        this.cols = 1;        this.rows = 1;        this.spriteHeight = image.getHeight();        this.spriteWidth = image.getWidth();        this.imgs = new BufferedImage[1];        this.imgs[0] = image;    }    @Override    public void draw(int x, int y, Graphics2D g) {        // draws the currently selected frame        if (reversed) {            BufferedImage image = imgs[selected];            AffineTransform at = new AffineTransform();            at.concatenate(AffineTransform.getScaleInstance(-1, 1));            at.concatenate(AffineTransform.getTranslateInstance(-image.getWidth(), 0));            BufferedImage mirroredImage = new BufferedImage(image.getWidth(), image.getHeight(), image.getType());            Graphics2D g2d = mirroredImage.createGraphics();            g2d.transform(at);            g2d.drawImage(image, 0, 0, null);            g.drawImage(mirroredImage, x - (Math.max(imgs[0].getWidth() - 16, 0)), y, null); // x offsetting so it draws in the correct place        }        else g.drawImage(imgs[selected], x, y, null);    }    public Sprite getSubSprite(int i) {        return new Sprite(imgs[i]);    }    public Sprite getSubSprite(int row, int col) {        return new Sprite(imgs[(col *cols) + row]);    }    public void setReversed(boolean reversed) {        this.reversed = reversed;    }    public void select(int i) { this.selected = i; }    public void next() { this.selected = (this.selected + 1) % imgs.length; }    public int getRows() {        return rows;    }    public int getCols() {        return cols;    }    public int getSpriteHeight() {        return spriteHeight;    }    public int getSpriteWidth() {        return spriteWidth;    }}